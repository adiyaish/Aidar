'====Функции===='
#функция-именнованный блок кода, который может принимать аргументы и возвращать результат

#def my_sum(x,y): #x,y-параметры
 #   a=x+y
  #  return x+y

#res = my_sum(5,10) #5,10-аргументы
#print(res)

'-------------------------------'
#Напишите функцию которая печатает то что мы передаем в нее
#def my_func(num):
  #  res=num*2
 #   return res

#num=my_func(10)

#def hello_world():
 #   return'Hello'

#print (hello_world())    
#msg=hello_world()
#print(msg)

# len()

#def my_len(a):
    #count=0
    #for i in a:
     #   count = count + 1
    #return count #3

#print (my_len('hello world')) #11

#print (len('hello world')) #11

'Функции соблюдают принцип DRY (dont repeat yourself)'

'====Аргументы и параметры===='
#Параметры это переменные внутри функции, параметры мы создаем когда создаем функцию
#Аргументы-значения, которые мы передаем при вызове функции

#def func (a,b): #a,b-параметры
 #   print(a,b)

#func(10,3) #10,3-аргументы

'====Виды параметров===='
#1.обязательно
#2.не обязательные
# 2.1 с дефолтом(со значением по умолчанию)
# 2.2*args(все позиционные аргументы, которые не попали в обязательные и с дефолтом)
# 2.3**r=kwargs(все лишние именнованные аргументы)

'====виды аргументов===='
#1.позиционные (по позиции)
#2.именнованные(по названию(параметр=значение))

#def func(num1,num2):
 #   print(num1+num2)
    
#func(num1=20,num2=10) 

#def func (a,b,*args,**kwargs):
 #   print(a)
  #  print(b)
#   print(args)
   # print(kwargs)

#func(5,1,10,4,2,5,1,hello='hi',abc='123123')

'Напишите функцию, которая называется div. Эта функция должна делить одно число на другое,сделайте проверку деления на 0'
def div(num1,num2):
    if num2==0:
        print('На ноль делить нельзя!')
    else:
        print(num1/num2) 
    

    































